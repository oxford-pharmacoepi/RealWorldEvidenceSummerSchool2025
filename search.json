[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set up",
    "section": "",
    "text": "In this section we cover how to set up your local environment to be able to conduct the practical sessions.\n\n\nIf you have any issue setting your environment please contact:\n\nEdward Burn: edward.burn@ndorms.ox.ac.uk\nMarti Catala: marti.catalasabate@ndorms.ox.ac.uk\n\n\n\n\nFollow this instructions to setup your environment:\n\n\n\nhttps://cran.r-project.org/bin/windows/base/ (at least version 4.2)\n\n\n\n\n\nhttps://posit.co/download/rstudio-desktop/\n\n\n\n\n\nhttps://cran.r-project.org/bin/windows/Rtools/\n\nAfter this steps open RStudio and install the following R packages. You can easily install a package from from the command line just typing: install.packages(\"PackageName\")\n\nDBI\nduckdb\nhere\nusethis\ndplyr\ndbplyr\nCDMConnector\nPatientProfiles\nIncidencePrevalence\nCohortConstructor\nDrugUtilisation\nOmopSketch\nvisOmopResults\nCohortCharacteristics\n\n\ninstall.packages(c(\"DBI\", \"duckdb\", \"here\", \"usethis\", \"dplyr\", \"dbplyr\", \n                   \"CDMConnector\", \"PatientProfiles\", \"IncidencePrevalence\", \n                   \"CohortConstructor\", \"DrugUtilisation\", \"OmopSketch\", \n                   \"visOmopResults\", \"CohortCharacteristics\"))\n\n\n\n\nExecute the following block of code and make sure that it produces the same output without any error:\n\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(here)\n\nhere() starts at /home/runner/work/RealWorldEvidenceSummerSchool2025/RealWorldEvidenceSummerSchool2025\n\nlibrary(usethis)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(dbplyr)\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\nlibrary(CDMConnector)\nlibrary(PatientProfiles)\nlibrary(IncidencePrevalence)\nlibrary(CohortConstructor)\nlibrary(DrugUtilisation)\nlibrary(OmopSketch)\nlibrary(visOmopResults)\nlibrary(CohortCharacteristics)\n\nrequireEunomia(datasetName = \"GiBleed\")\n\nℹ `EUNOMIA_DATA_FOLDER` set to: '/tmp/RtmprmYg4n'.\n\n\n\nDownload completed!\n\ndb &lt;- dbConnect(duckdb(), dbdir = eunomiaDir())\n\nCreating CDM database /tmp/RtmprmYg4n/GiBleed_5.3.zip\n\ncdm &lt;- cdmFromCon(con = db, cdmSchema = \"main\", writeSchema = \"main\")\ncdm$my_cohort &lt;- conceptCohort(\n  cdm = cdm,\n  name = \"my_cohort\",\n  conceptSet = list('chronic_sinusitis' = 257012L)\n)\n\nℹ Subsetting table condition_occurrence using 1 concept with domain: condition.\n\n\nℹ Combining tables.\nℹ Creating cohort attributes.\nℹ Applying cohort requirements.\nℹ Merging overlapping records.\n✔ Cohort my_cohort created.\n\nsettings(cdm$my_cohort)\n\n# A tibble: 1 × 4\n  cohort_definition_id cohort_name       cdm_version vocabulary_version\n                 &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;             \n1                    1 chronic_sinusitis 5.3         v5.0 18-JAN-19    \n\n\n\n\n\n\n\n\nStore data partmanently\n\n\n\nNote this code will download the GiBleed data set every time. GiBleed is a small data set with only 6MB, but there are other data sets that can be ~1GB and downloading them every time it is not efficient. To efficiently store the data permanently you have to set up an environment secret pointing to a path where data sets will be stored.\nTo set up an environment variable use:\n\nusethis::edit_r_environ()\n\nwrite your secret there:\nEUNOMIA_DATA_FOLDER=\"path/to/data/folder\"\nRestart R and then every time that you use the function requireEunomia() or downloadEunomiaData() the code will check if it is already downloaded there so you don’t have to download the same code twice.\nTo check that you have saved the path correctly you can check it using:\n\nSys.getenv(\"EUNOMIA_DATA_FOLDER\")\n\n\n\n[1] \"path/to/data/folder\""
  },
  {
    "objectID": "setup.html#issues",
    "href": "setup.html#issues",
    "title": "Set up",
    "section": "",
    "text": "If you have any issue setting your environment please contact:\n\nEdward Burn: edward.burn@ndorms.ox.ac.uk\nMarti Catala: marti.catalasabate@ndorms.ox.ac.uk"
  },
  {
    "objectID": "setup.html#setup-your-laptop",
    "href": "setup.html#setup-your-laptop",
    "title": "Set up",
    "section": "",
    "text": "Follow this instructions to setup your environment:\n\n\n\nhttps://cran.r-project.org/bin/windows/base/ (at least version 4.2)\n\n\n\n\n\nhttps://posit.co/download/rstudio-desktop/\n\n\n\n\n\nhttps://cran.r-project.org/bin/windows/Rtools/\n\nAfter this steps open RStudio and install the following R packages. You can easily install a package from from the command line just typing: install.packages(\"PackageName\")\n\nDBI\nduckdb\nhere\nusethis\ndplyr\ndbplyr\nCDMConnector\nPatientProfiles\nIncidencePrevalence\nCohortConstructor\nDrugUtilisation\nOmopSketch\nvisOmopResults\nCohortCharacteristics\n\n\ninstall.packages(c(\"DBI\", \"duckdb\", \"here\", \"usethis\", \"dplyr\", \"dbplyr\", \n                   \"CDMConnector\", \"PatientProfiles\", \"IncidencePrevalence\", \n                   \"CohortConstructor\", \"DrugUtilisation\", \"OmopSketch\", \n                   \"visOmopResults\", \"CohortCharacteristics\"))\n\n\n\n\nExecute the following block of code and make sure that it produces the same output without any error:\n\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(here)\n\nhere() starts at /home/runner/work/RealWorldEvidenceSummerSchool2025/RealWorldEvidenceSummerSchool2025\n\nlibrary(usethis)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(dbplyr)\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\nlibrary(CDMConnector)\nlibrary(PatientProfiles)\nlibrary(IncidencePrevalence)\nlibrary(CohortConstructor)\nlibrary(DrugUtilisation)\nlibrary(OmopSketch)\nlibrary(visOmopResults)\nlibrary(CohortCharacteristics)\n\nrequireEunomia(datasetName = \"GiBleed\")\n\nℹ `EUNOMIA_DATA_FOLDER` set to: '/tmp/RtmprmYg4n'.\n\n\n\nDownload completed!\n\ndb &lt;- dbConnect(duckdb(), dbdir = eunomiaDir())\n\nCreating CDM database /tmp/RtmprmYg4n/GiBleed_5.3.zip\n\ncdm &lt;- cdmFromCon(con = db, cdmSchema = \"main\", writeSchema = \"main\")\ncdm$my_cohort &lt;- conceptCohort(\n  cdm = cdm,\n  name = \"my_cohort\",\n  conceptSet = list('chronic_sinusitis' = 257012L)\n)\n\nℹ Subsetting table condition_occurrence using 1 concept with domain: condition.\n\n\nℹ Combining tables.\nℹ Creating cohort attributes.\nℹ Applying cohort requirements.\nℹ Merging overlapping records.\n✔ Cohort my_cohort created.\n\nsettings(cdm$my_cohort)\n\n# A tibble: 1 × 4\n  cohort_definition_id cohort_name       cdm_version vocabulary_version\n                 &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;             \n1                    1 chronic_sinusitis 5.3         v5.0 18-JAN-19    \n\n\n\n\n\n\n\n\nStore data partmanently\n\n\n\nNote this code will download the GiBleed data set every time. GiBleed is a small data set with only 6MB, but there are other data sets that can be ~1GB and downloading them every time it is not efficient. To efficiently store the data permanently you have to set up an environment secret pointing to a path where data sets will be stored.\nTo set up an environment variable use:\n\nusethis::edit_r_environ()\n\nwrite your secret there:\nEUNOMIA_DATA_FOLDER=\"path/to/data/folder\"\nRestart R and then every time that you use the function requireEunomia() or downloadEunomiaData() the code will check if it is already downloaded there so you don’t have to download the same code twice.\nTo check that you have saved the path correctly you can check it using:\n\nSys.getenv(\"EUNOMIA_DATA_FOLDER\")\n\n\n\n[1] \"path/to/data/folder\""
  },
  {
    "objectID": "Practicals/Introduction/index.html",
    "href": "Practicals/Introduction/index.html",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Every time that someone goes to the doctor and something happens the doctors write it into their records.\nEach annotation of the doctor is translated into a code, combination of letters and numbers that refers to a condition. There exist several different codding languages: SNOMED, read codes, ICD10, ICD9, RxNorm, ATC, … It depends on the region, language, type of record and others which one is used. This makes that the same condition or drug can be coded in different ways.\nA compilation of these records for a group of people is what we call the medical databases. Depending on the origin and purpose of these data there are different groups of databases: electronic health records, claims data, registries… This databases can be structured by several different tables.\nThe Observational Medical Outcomes Partnership (OMOP) Common Data Model (CDM) is an open community data standard, designed to standardise the structure and content of observational data and to enable efficient analyses that can produce reliable evidence.\n\n\n\n\n\n\n\nTables and relation in the OMOP Common Data Model\n\n\n\n\n\n\n\n\nMapping process\n\n\n\n\n\n\n\n\nMapping process\n\n\n\n\n\n\n\n\nMapping process\n\n\n\n\n\nFrom all the vocabularies OMOP CDM uses only a few as Standard: SNOMED for conditions, RxNorm for drugs, …\n. . .\nThe process to obtain an standard code from non standard one is called mapping. We can find the mapping in the concept_relationship table.\n. . .\nEach one of the records in clinical data tables (condition_occurrence, drug_exposure, measurement, observation, …) will be coded by two codes:\n\nSource concept: particular to each database, it is the original code.\nStandard concept: equivalent code from the standard vocabulary.\n\n\n\n\nIn concept relationship we can find different information such as:\n\n\n\nConcept relationship\n\n\n. . .\nIn particular, we have the Maps to and Mapped from relations that can help us to see the mapping between codes.\n\n\n\n\n\n\nMapping process\n\n\n\n\n\n\n\n\nMapping process\n\n\n\n\n\n\n\n\nMapping process\n\n\n\n\n\n. . .\nFor more details on how the vocabularies work you can check: Vocabulary course in EHDEN academy\n. . .\nAll details about OMOP CDM and more can be found in: the book of ohdsi.\n\n\n\nThe book of ohdsi cover\n\n\n\n\n\n. . .\nDatabase connections from R can be made using the DBI package.\n\nlibrary(DBI)\n\n. . .\nConnect to postgres:\n\ndb &lt;- DBI::dbConnect(\n  RPostgres::Postgres(),\n  dbname = \"...\",\n  host = \"...\",\n  user = \"...\",\n  password = \"...\"\n)\n\n\n\n\nConnect to Sql server:\n\ndb &lt;- DBI::dbConnect(\n  odbc::odbc(),\n  Driver   = \"ODBC Driver 18 for SQL Server\",\n  Server   = \"...\",\n  Database = \"...\",\n  UID      = \"...\",\n  PWD      = \"...\",\n  TrustServerCertificate = \"yes\",\n  Port     = \"...\"\n)\n\n. . .\nIn this CDMConnector article you can see how to connect to the different supported DBMS.\n\n\n\n. . .\nEunomia is a synthetic OMOP database with ~2,600 individuals. It is freely available and you can download it as:\n. . .\n\ndbName &lt;- \"GiBleed\"\nCDMConnector::requireEunomia(datasetName = dbName)\n\nℹ `EUNOMIA_DATA_FOLDER` set to: '/tmp/Rtmp0V9Ciw'.\n\n\n\nDownload completed!\n\n\n. . .\nTo connect to this database we are going to use duckdb\n\ndb &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomiaDir(datasetName = dbName))\n\nCreating CDM database /tmp/Rtmp0V9Ciw/GiBleed_5.3.zip\n\ndb\n\n&lt;duckdb_connection 57fa0 driver=&lt;duckdb_driver dbdir='/tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb' read_only=FALSE bigint=numeric&gt;&gt;\n\n\n\n\n\n. . .\nDatabases are organised by schemas (blueprint or plan that defines how the data will be organised and structured within the database).\n. . .\nIn general, OMOP databases have two schemas:\n\ncdm schema: it contains all the tables of the cdm. Usually we only will have reading permission for this schema.\nwrite schema: it is a place where we can store tables (like cohorts). We need writing permissions to this schema.\n\n. . .\nEunomia only has a single schema (main) that will be used as cdm schema and write schema.\n\n\n\n\n\n\n\n\n\n\n\nWe already know what the structure of the OMOP CDM looks like. The CDMConnector package was made to help you to quickly create a reference to the OMOP CDM data as a whole.\n\nlibrary(CDMConnector)\n\n\nTo install any of these packages that we use you can type: install.packages(\"CDMConnector\") in the console.\n\n\n\n\n\ncdm &lt;- CDMConnector::cdmFromCon(con = db, cdmSchema = \"main\", writeSchema = \"main\")\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -\n\n\n\n\n\n\ncdm$person\n\n# Source:   table&lt;person&gt; [?? x 18]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   person_id gender_concept_id year_of_birth month_of_birth day_of_birth birth_datetime      race_concept_id\n       &lt;int&gt;             &lt;int&gt;         &lt;int&gt;          &lt;int&gt;        &lt;int&gt; &lt;dttm&gt;                        &lt;int&gt;\n 1         6              8532          1963             12           31 1963-12-31 00:00:00            8516\n 2       123              8507          1950              4           12 1950-04-12 00:00:00            8527\n 3       129              8507          1974             10            7 1974-10-07 00:00:00            8527\n 4        16              8532          1971             10           13 1971-10-13 00:00:00            8527\n 5        65              8532          1967              3           31 1967-03-31 00:00:00            8516\n 6        74              8532          1972              1            5 1972-01-05 00:00:00            8527\n 7        42              8532          1909             11            2 1909-11-02 00:00:00            8527\n 8       187              8507          1945              7           23 1945-07-23 00:00:00            8527\n 9        18              8532          1965             11           17 1965-11-17 00:00:00            8527\n10       111              8532          1975              5            2 1975-05-02 00:00:00            8527\n# ℹ more rows\n# ℹ 11 more variables: ethnicity_concept_id &lt;int&gt;, location_id &lt;int&gt;, provider_id &lt;int&gt;, care_site_id &lt;int&gt;,\n#   person_source_value &lt;chr&gt;, gender_source_value &lt;chr&gt;, gender_source_concept_id &lt;int&gt;, race_source_value &lt;chr&gt;,\n#   race_source_concept_id &lt;int&gt;, ethnicity_source_value &lt;chr&gt;, ethnicity_source_concept_id &lt;int&gt;\n\n\n\n\n\n. . .\nOnce we read a table we can operate with it and for example count the number of rows of person table.\n\ncdm$person |&gt;\n  dplyr::count()\n\n# Source:   SQL [?? x 1]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n      n\n  &lt;dbl&gt;\n1  2694\n\n\n\n\n\nIf you are familiarised with tidyverse you can use any of the usual dplyr commands in you database tables.\n. . .\n\ncdm$drug_exposure |&gt;\n  dplyr::group_by(drug_concept_id) |&gt;\n  dplyr::summarise(number_persons = dplyr::n_distinct(person_id)) |&gt;\n  dplyr::collect() |&gt;\n  dplyr::arrange(dplyr::desc(number_persons))\n\n# A tibble: 113 × 2\n   drug_concept_id number_persons\n             &lt;int&gt;          &lt;dbl&gt;\n 1        40213227           2660\n 2         1127433           2580\n 3        40213160           2140\n 4         1713671           2021\n 5        19059056           1927\n 6         1118084           1844\n 7        40213296           1737\n 8        40213306           1560\n 9         1127078           1428\n10        40229134           1393\n# ℹ 103 more rows\n\n\n\n\n\nWhen we have a cdm object we can check which is the name of that database using:\n\n. . .\n\nCDMConnector::cdmName(cdm)\n\n[1] \"Synthea\"\n\n\n\n. . .\nIn some cases we want to give a database a name that we want, this can be done at the connection stage:\n\n. . .\n\ncdm &lt;- CDMConnector::cdmFromCon(\n  con = db, cdmSchema = \"main\", writeSchema = \"main\", cdmName = \"EUNOMIA\"\n)\n\n\n. . .\n\nCDMConnector::cdmName(cdm)\n\n[1] \"EUNOMIA\"\n\n\n\n\n\nLet’s say I want to subset the condition_occurrence table to a certain rows and certain columns and save it so I can later access it.\n. . .\ntemporary table (default):\n\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n\n\n. . .\n\ncdm$my_saved_table &lt;- cdm$condition_occurrence |&gt;\n  dplyr::filter(condition_concept_id == 4112343) |&gt;\n  dplyr::select(person_id, condition_start_date) |&gt;\n  dplyr::compute()\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"            \"og_001_1748881460\"    \n\n\n\n\n\n. . .\npermanent table:\n\ncdm$my_saved_table &lt;- cdm$condition_occurrence |&gt;\n  dplyr::filter(condition_concept_id == 4112343) |&gt;\n  dplyr::select(person_id, condition_start_date) |&gt;\n  dplyr::compute(name = \"my_saved_table\", temporary = FALSE)\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"my_saved_table\"        \"note\"                  \"note_nlp\"             \n[25] \"observation\"           \"observation_period\"    \"payer_plan_period\"     \"person\"               \n[29] \"procedure_occurrence\"  \"provider\"              \"relationship\"          \"source_to_concept_map\"\n[33] \"specimen\"              \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n[37] \"og_001_1748881460\"    \n\n\n\n\n\n\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_saved_table\n\ncdm$my_saved_table\n\n# Source:   table&lt;my_saved_table&gt; [?? x 2]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   person_id condition_start_date\n       &lt;int&gt; &lt;date&gt;              \n 1       263 2015-10-02          \n 2       439 1990-03-20          \n 3       449 1999-12-12          \n 4       515 1961-11-14          \n 5        17 1963-12-02          \n 6        30 1993-03-19          \n 7        90 1970-01-15          \n 8       116 1959-06-11          \n 9       137 2005-11-15          \n10       176 1986-10-08          \n# ℹ more rows\n\n\n\n\n\nTo drop an existing table:\n\nEliminate the table from the cdm object.\nEliminate the table from the database.\n\n. . .\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = \"my_saved_table\")\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -\n\n\n\n\n\n. . .\n\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"            \"og_001_1748881460\"    \n\n\n\n\n\nLet’s drop also the other table that we created:\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = dplyr::starts_with(\"og_\"))\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -\n\n\n\n\n\n\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n\n\n\n\n\nLet’s say we have a local tibble and we want to insert it in the cdm:\n\ncdm &lt;- CDMConnector::insertTable(cdm = cdm, name = \"my_test_table\", table = cars)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_test_table\n\n\n\n\n\n\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"my_test_table\"         \"note\"                  \"note_nlp\"             \n[25] \"observation\"           \"observation_period\"    \"payer_plan_period\"     \"person\"               \n[29] \"procedure_occurrence\"  \"provider\"              \"relationship\"          \"source_to_concept_map\"\n[33] \"specimen\"              \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n\ncdm$my_test_table\n\n# Source:   table&lt;my_test_table&gt; [?? x 2]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   speed  dist\n   &lt;dbl&gt; &lt;dbl&gt;\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ℹ more rows\n\n\n\n\n\nIt is VERY IMPORTANT that when we create the cdm object we use a prefix:\n\ncdm &lt;- CDMConnector::cdmFromCon(\n  con = db, \n  cdmSchema = \"main\", \n  writeSchema = \"main\", \n  writePrefix = \"my_prefix_\"\n)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -\n\n\n\n\n\nNow when we create a new table the prefix will be automatically added:\n\ncdm &lt;- CDMConnector::insertTable(cdm = cdm, name = \"my_test_table\", table = cars)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_test_table\n\n\n\n\n\n\nCDMConnector::listSourceTables(cdm = cdm)\n\n[1] \"my_test_table\"\n\ncdm$my_test_table\n\n# Source:   table&lt;my_prefix_my_test_table&gt; [?? x 2]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   speed  dist\n   &lt;dbl&gt; &lt;dbl&gt;\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ℹ more rows\n\n\n\n\n\nDO NOT use the prefix to drop tables, you only care about the prefix at the connection stage!\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = \"my_prefix_my_test_table\")\nCDMConnector::listSourceTables(cdm = cdm)\n\n[1] \"my_test_table\"\n\n\n\n\n\n\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_test_table\n\n\n\n\n\nDO NOT use the prefix to drop tables, you only care about the prefix at the connection stage!\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = \"my_test_table\")\nCDMConnector::listSourceTables(cdm = cdm)\n\ncharacter(0)\n\n\n\n\n\n\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -\n\n\n\n\n\nWe use compute() to compute the result into a temporary (temporary = TRUE) or permanent (temporary = FALSE) table.\nIf it is a temporary table we can assign assign it to where I want for example:\n\ncdm$my_custom_name &lt;- cdm$person |&gt; \n  dplyr::compute()\n\n. . .\nIf it is a permanent table we can only assign it to the same name:\nerror:\n\ncdm$my_custom_name &lt;- cdm$person |&gt; \n  dplyr::compute(name = \"not_my_custom_name\", temporary = FALSE)\n\nError in `[[&lt;-`:\n! You can't assign a table named not_my_custom_name to my_custom_name. Please use compute to change table name.\n\n\n. . .\nno error:\n\ncdm$my_custom_name &lt;- cdm$person |&gt; \n  dplyr::compute(name = \"my_custom_name\", temporary = FALSE)\n\n\n\n\nOmop names are reserved words, e.g. we can not assign a table that is not the person table to cdm$person.\n. . .\n\ncdm$person &lt;- cdm$drug_exposure |&gt; \n  dplyr::compute(name = \"person\", temporary = FALSE)\n\nError in `newOmopTable()`:\n! gender_concept_id, year_of_birth, race_concept_id and ethnicity_concept_id are not present in table person\n\n\n. . .\n\ncdm$drug_exposure &lt;- cdm$drug_exposure |&gt; \n  dplyr::rename(\"my_id\" = \"person_id\") |&gt; \n  dplyr::compute(name = \"drug_exposure\", temporary = FALSE)\n\nError in `newOmopTable()`:\n! person_id is not present in table drug_exposure"
  },
  {
    "objectID": "Practicals/Introduction/index.html#introduction-the-omop-common-data-model",
    "href": "Practicals/Introduction/index.html#introduction-the-omop-common-data-model",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Every time that someone goes to the doctor and something happens the doctors write it into their records.\nEach annotation of the doctor is translated into a code, combination of letters and numbers that refers to a condition. There exist several different codding languages: SNOMED, read codes, ICD10, ICD9, RxNorm, ATC, … It depends on the region, language, type of record and others which one is used. This makes that the same condition or drug can be coded in different ways.\nA compilation of these records for a group of people is what we call the medical databases. Depending on the origin and purpose of these data there are different groups of databases: electronic health records, claims data, registries… This databases can be structured by several different tables.\nThe Observational Medical Outcomes Partnership (OMOP) Common Data Model (CDM) is an open community data standard, designed to standardise the structure and content of observational data and to enable efficient analyses that can produce reliable evidence."
  },
  {
    "objectID": "Practicals/Introduction/index.html#standarisation-of-the-data-format",
    "href": "Practicals/Introduction/index.html#standarisation-of-the-data-format",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Tables and relation in the OMOP Common Data Model"
  },
  {
    "objectID": "Practicals/Introduction/index.html#mapping-a-database-to-the-omop-cdm",
    "href": "Practicals/Introduction/index.html#mapping-a-database-to-the-omop-cdm",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Mapping process"
  },
  {
    "objectID": "Practicals/Introduction/index.html#mapping-a-database-to-the-omop-cdm-1",
    "href": "Practicals/Introduction/index.html#mapping-a-database-to-the-omop-cdm-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Mapping process"
  },
  {
    "objectID": "Practicals/Introduction/index.html#mapping-a-database-to-the-omop-cdm-2",
    "href": "Practicals/Introduction/index.html#mapping-a-database-to-the-omop-cdm-2",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Mapping process"
  },
  {
    "objectID": "Practicals/Introduction/index.html#standarisation-of-the-vocabularies",
    "href": "Practicals/Introduction/index.html#standarisation-of-the-vocabularies",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "From all the vocabularies OMOP CDM uses only a few as Standard: SNOMED for conditions, RxNorm for drugs, …\n. . .\nThe process to obtain an standard code from non standard one is called mapping. We can find the mapping in the concept_relationship table.\n. . .\nEach one of the records in clinical data tables (condition_occurrence, drug_exposure, measurement, observation, …) will be coded by two codes:\n\nSource concept: particular to each database, it is the original code.\nStandard concept: equivalent code from the standard vocabulary."
  },
  {
    "objectID": "Practicals/Introduction/index.html#example-of-mapping",
    "href": "Practicals/Introduction/index.html#example-of-mapping",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "In concept relationship we can find different information such as:\n\n\n\nConcept relationship\n\n\n. . .\nIn particular, we have the Maps to and Mapped from relations that can help us to see the mapping between codes."
  },
  {
    "objectID": "Practicals/Introduction/index.html#example-of-mapping-1",
    "href": "Practicals/Introduction/index.html#example-of-mapping-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Mapping process"
  },
  {
    "objectID": "Practicals/Introduction/index.html#example-of-mapping-2",
    "href": "Practicals/Introduction/index.html#example-of-mapping-2",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Mapping process"
  },
  {
    "objectID": "Practicals/Introduction/index.html#example-of-mapping-3",
    "href": "Practicals/Introduction/index.html#example-of-mapping-3",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Mapping process"
  },
  {
    "objectID": "Practicals/Introduction/index.html#more-details",
    "href": "Practicals/Introduction/index.html#more-details",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\nFor more details on how the vocabularies work you can check: Vocabulary course in EHDEN academy\n. . .\nAll details about OMOP CDM and more can be found in: the book of ohdsi.\n\n\n\nThe book of ohdsi cover"
  },
  {
    "objectID": "Practicals/Introduction/index.html#connecting-to-a-database-from-r-the-dbi-package",
    "href": "Practicals/Introduction/index.html#connecting-to-a-database-from-r-the-dbi-package",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\nDatabase connections from R can be made using the DBI package.\n\nlibrary(DBI)\n\n. . .\nConnect to postgres:\n\ndb &lt;- DBI::dbConnect(\n  RPostgres::Postgres(),\n  dbname = \"...\",\n  host = \"...\",\n  user = \"...\",\n  password = \"...\"\n)"
  },
  {
    "objectID": "Practicals/Introduction/index.html#connecting-to-a-database-from-r-the-dbi-package-1",
    "href": "Practicals/Introduction/index.html#connecting-to-a-database-from-r-the-dbi-package-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Connect to Sql server:\n\ndb &lt;- DBI::dbConnect(\n  odbc::odbc(),\n  Driver   = \"ODBC Driver 18 for SQL Server\",\n  Server   = \"...\",\n  Database = \"...\",\n  UID      = \"...\",\n  PWD      = \"...\",\n  TrustServerCertificate = \"yes\",\n  Port     = \"...\"\n)\n\n. . .\nIn this CDMConnector article you can see how to connect to the different supported DBMS."
  },
  {
    "objectID": "Practicals/Introduction/index.html#connect-to-eunomia",
    "href": "Practicals/Introduction/index.html#connect-to-eunomia",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\nEunomia is a synthetic OMOP database with ~2,600 individuals. It is freely available and you can download it as:\n. . .\n\ndbName &lt;- \"GiBleed\"\nCDMConnector::requireEunomia(datasetName = dbName)\n\nℹ `EUNOMIA_DATA_FOLDER` set to: '/tmp/Rtmp0V9Ciw'.\n\n\n\nDownload completed!\n\n\n. . .\nTo connect to this database we are going to use duckdb\n\ndb &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomiaDir(datasetName = dbName))\n\nCreating CDM database /tmp/Rtmp0V9Ciw/GiBleed_5.3.zip\n\ndb\n\n&lt;duckdb_connection 57fa0 driver=&lt;duckdb_driver dbdir='/tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb' read_only=FALSE bigint=numeric&gt;&gt;"
  },
  {
    "objectID": "Practicals/Introduction/index.html#databases-organisation",
    "href": "Practicals/Introduction/index.html#databases-organisation",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\nDatabases are organised by schemas (blueprint or plan that defines how the data will be organised and structured within the database).\n. . .\nIn general, OMOP databases have two schemas:\n\ncdm schema: it contains all the tables of the cdm. Usually we only will have reading permission for this schema.\nwrite schema: it is a place where we can store tables (like cohorts). We need writing permissions to this schema.\n\n. . .\nEunomia only has a single schema (main) that will be used as cdm schema and write schema."
  },
  {
    "objectID": "Practicals/Introduction/index.html#creating-a-reference-to-the-omop-common-data-model",
    "href": "Practicals/Introduction/index.html#creating-a-reference-to-the-omop-common-data-model",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "We already know what the structure of the OMOP CDM looks like. The CDMConnector package was made to help you to quickly create a reference to the OMOP CDM data as a whole.\n\nlibrary(CDMConnector)\n\n\nTo install any of these packages that we use you can type: install.packages(\"CDMConnector\") in the console."
  },
  {
    "objectID": "Practicals/Introduction/index.html#lets-create-our-first-cdm-reference",
    "href": "Practicals/Introduction/index.html#lets-create-our-first-cdm-reference",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "cdm &lt;- CDMConnector::cdmFromCon(con = db, cdmSchema = \"main\", writeSchema = \"main\")\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -"
  },
  {
    "objectID": "Practicals/Introduction/index.html#access-to-tables-of-the-cdm-reference",
    "href": "Practicals/Introduction/index.html#access-to-tables-of-the-cdm-reference",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "cdm$person\n\n# Source:   table&lt;person&gt; [?? x 18]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   person_id gender_concept_id year_of_birth month_of_birth day_of_birth birth_datetime      race_concept_id\n       &lt;int&gt;             &lt;int&gt;         &lt;int&gt;          &lt;int&gt;        &lt;int&gt; &lt;dttm&gt;                        &lt;int&gt;\n 1         6              8532          1963             12           31 1963-12-31 00:00:00            8516\n 2       123              8507          1950              4           12 1950-04-12 00:00:00            8527\n 3       129              8507          1974             10            7 1974-10-07 00:00:00            8527\n 4        16              8532          1971             10           13 1971-10-13 00:00:00            8527\n 5        65              8532          1967              3           31 1967-03-31 00:00:00            8516\n 6        74              8532          1972              1            5 1972-01-05 00:00:00            8527\n 7        42              8532          1909             11            2 1909-11-02 00:00:00            8527\n 8       187              8507          1945              7           23 1945-07-23 00:00:00            8527\n 9        18              8532          1965             11           17 1965-11-17 00:00:00            8527\n10       111              8532          1975              5            2 1975-05-02 00:00:00            8527\n# ℹ more rows\n# ℹ 11 more variables: ethnicity_concept_id &lt;int&gt;, location_id &lt;int&gt;, provider_id &lt;int&gt;, care_site_id &lt;int&gt;,\n#   person_source_value &lt;chr&gt;, gender_source_value &lt;chr&gt;, gender_source_concept_id &lt;int&gt;, race_source_value &lt;chr&gt;,\n#   race_source_concept_id &lt;int&gt;, ethnicity_source_value &lt;chr&gt;, ethnicity_source_concept_id &lt;int&gt;"
  },
  {
    "objectID": "Practicals/Introduction/index.html#read-tables-in-eunomia",
    "href": "Practicals/Introduction/index.html#read-tables-in-eunomia",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\nOnce we read a table we can operate with it and for example count the number of rows of person table.\n\ncdm$person |&gt;\n  dplyr::count()\n\n# Source:   SQL [?? x 1]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n      n\n  &lt;dbl&gt;\n1  2694"
  },
  {
    "objectID": "Practicals/Introduction/index.html#operation-with-tidyverse",
    "href": "Practicals/Introduction/index.html#operation-with-tidyverse",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "If you are familiarised with tidyverse you can use any of the usual dplyr commands in you database tables.\n. . .\n\ncdm$drug_exposure |&gt;\n  dplyr::group_by(drug_concept_id) |&gt;\n  dplyr::summarise(number_persons = dplyr::n_distinct(person_id)) |&gt;\n  dplyr::collect() |&gt;\n  dplyr::arrange(dplyr::desc(number_persons))\n\n# A tibble: 113 × 2\n   drug_concept_id number_persons\n             &lt;int&gt;          &lt;dbl&gt;\n 1        40213227           2660\n 2         1127433           2580\n 3        40213160           2140\n 4         1713671           2021\n 5        19059056           1927\n 6         1118084           1844\n 7        40213296           1737\n 8        40213306           1560\n 9         1127078           1428\n10        40229134           1393\n# ℹ 103 more rows"
  },
  {
    "objectID": "Practicals/Introduction/index.html#database-name",
    "href": "Practicals/Introduction/index.html#database-name",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "When we have a cdm object we can check which is the name of that database using:\n\n. . .\n\nCDMConnector::cdmName(cdm)\n\n[1] \"Synthea\"\n\n\n\n. . .\nIn some cases we want to give a database a name that we want, this can be done at the connection stage:\n\n. . .\n\ncdm &lt;- CDMConnector::cdmFromCon(\n  con = db, cdmSchema = \"main\", writeSchema = \"main\", cdmName = \"EUNOMIA\"\n)\n\n\n. . .\n\nCDMConnector::cdmName(cdm)\n\n[1] \"EUNOMIA\""
  },
  {
    "objectID": "Practicals/Introduction/index.html#create-a-new-table",
    "href": "Practicals/Introduction/index.html#create-a-new-table",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Let’s say I want to subset the condition_occurrence table to a certain rows and certain columns and save it so I can later access it.\n. . .\ntemporary table (default):\n\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n\n\n. . .\n\ncdm$my_saved_table &lt;- cdm$condition_occurrence |&gt;\n  dplyr::filter(condition_concept_id == 4112343) |&gt;\n  dplyr::select(person_id, condition_start_date) |&gt;\n  dplyr::compute()\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"            \"og_001_1748881460\""
  },
  {
    "objectID": "Practicals/Introduction/index.html#create-a-new-table-1",
    "href": "Practicals/Introduction/index.html#create-a-new-table-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\npermanent table:\n\ncdm$my_saved_table &lt;- cdm$condition_occurrence |&gt;\n  dplyr::filter(condition_concept_id == 4112343) |&gt;\n  dplyr::select(person_id, condition_start_date) |&gt;\n  dplyr::compute(name = \"my_saved_table\", temporary = FALSE)\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"my_saved_table\"        \"note\"                  \"note_nlp\"             \n[25] \"observation\"           \"observation_period\"    \"payer_plan_period\"     \"person\"               \n[29] \"procedure_occurrence\"  \"provider\"              \"relationship\"          \"source_to_concept_map\"\n[33] \"specimen\"              \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n[37] \"og_001_1748881460\""
  },
  {
    "objectID": "Practicals/Introduction/index.html#create-a-new-table-2",
    "href": "Practicals/Introduction/index.html#create-a-new-table-2",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "cdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_saved_table\n\ncdm$my_saved_table\n\n# Source:   table&lt;my_saved_table&gt; [?? x 2]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   person_id condition_start_date\n       &lt;int&gt; &lt;date&gt;              \n 1       263 2015-10-02          \n 2       439 1990-03-20          \n 3       449 1999-12-12          \n 4       515 1961-11-14          \n 5        17 1963-12-02          \n 6        30 1993-03-19          \n 7        90 1970-01-15          \n 8       116 1959-06-11          \n 9       137 2005-11-15          \n10       176 1986-10-08          \n# ℹ more rows"
  },
  {
    "objectID": "Practicals/Introduction/index.html#drop-an-existing-table",
    "href": "Practicals/Introduction/index.html#drop-an-existing-table",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "To drop an existing table:\n\nEliminate the table from the cdm object.\nEliminate the table from the database.\n\n. . .\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = \"my_saved_table\")\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -"
  },
  {
    "objectID": "Practicals/Introduction/index.html#drop-an-existing-table-1",
    "href": "Practicals/Introduction/index.html#drop-an-existing-table-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": ". . .\n\nCDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"            \"og_001_1748881460\""
  },
  {
    "objectID": "Practicals/Introduction/index.html#drop-an-existing-table-2",
    "href": "Practicals/Introduction/index.html#drop-an-existing-table-2",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Let’s drop also the other table that we created:\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = dplyr::starts_with(\"og_\"))\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -"
  },
  {
    "objectID": "Practicals/Introduction/index.html#drop-an-existing-table-3",
    "href": "Practicals/Introduction/index.html#drop-an-existing-table-3",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "CDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"note\"                  \"note_nlp\"              \"observation\"          \n[25] \"observation_period\"    \"payer_plan_period\"     \"person\"                \"procedure_occurrence\" \n[29] \"provider\"              \"relationship\"          \"source_to_concept_map\" \"specimen\"             \n[33] \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\""
  },
  {
    "objectID": "Practicals/Introduction/index.html#insert-a-table",
    "href": "Practicals/Introduction/index.html#insert-a-table",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Let’s say we have a local tibble and we want to insert it in the cdm:\n\ncdm &lt;- CDMConnector::insertTable(cdm = cdm, name = \"my_test_table\", table = cars)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of EUNOMIA ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_test_table"
  },
  {
    "objectID": "Practicals/Introduction/index.html#insert-a-table-1",
    "href": "Practicals/Introduction/index.html#insert-a-table-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "CDMConnector::listSourceTables(cdm)\n\n [1] \"care_site\"             \"cdm_source\"            \"concept\"               \"concept_ancestor\"     \n [5] \"concept_class\"         \"concept_relationship\"  \"concept_synonym\"       \"condition_era\"        \n [9] \"condition_occurrence\"  \"cost\"                  \"death\"                 \"device_exposure\"      \n[13] \"domain\"                \"dose_era\"              \"drug_era\"              \"drug_exposure\"        \n[17] \"drug_strength\"         \"fact_relationship\"     \"location\"              \"measurement\"          \n[21] \"metadata\"              \"my_test_table\"         \"note\"                  \"note_nlp\"             \n[25] \"observation\"           \"observation_period\"    \"payer_plan_period\"     \"person\"               \n[29] \"procedure_occurrence\"  \"provider\"              \"relationship\"          \"source_to_concept_map\"\n[33] \"specimen\"              \"visit_detail\"          \"visit_occurrence\"      \"vocabulary\"           \n\ncdm$my_test_table\n\n# Source:   table&lt;my_test_table&gt; [?? x 2]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   speed  dist\n   &lt;dbl&gt; &lt;dbl&gt;\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ℹ more rows"
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix",
    "href": "Practicals/Introduction/index.html#use-a-prefix",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "It is VERY IMPORTANT that when we create the cdm object we use a prefix:\n\ncdm &lt;- CDMConnector::cdmFromCon(\n  con = db, \n  cdmSchema = \"main\", \n  writeSchema = \"main\", \n  writePrefix = \"my_prefix_\"\n)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -"
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix-1",
    "href": "Practicals/Introduction/index.html#use-a-prefix-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Now when we create a new table the prefix will be automatically added:\n\ncdm &lt;- CDMConnector::insertTable(cdm = cdm, name = \"my_test_table\", table = cars)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_test_table"
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix-2",
    "href": "Practicals/Introduction/index.html#use-a-prefix-2",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "CDMConnector::listSourceTables(cdm = cdm)\n\n[1] \"my_test_table\"\n\ncdm$my_test_table\n\n# Source:   table&lt;my_prefix_my_test_table&gt; [?? x 2]\n# Database: DuckDB v1.3.0 [unknown@Linux 6.11.0-1014-azure:R 4.5.0//tmp/Rtmp0V9Ciw/file2cd838c073d5.duckdb]\n   speed  dist\n   &lt;dbl&gt; &lt;dbl&gt;\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ℹ more rows"
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix-3",
    "href": "Practicals/Introduction/index.html#use-a-prefix-3",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "DO NOT use the prefix to drop tables, you only care about the prefix at the connection stage!\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = \"my_prefix_my_test_table\")\nCDMConnector::listSourceTables(cdm = cdm)\n\n[1] \"my_test_table\""
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix-4",
    "href": "Practicals/Introduction/index.html#use-a-prefix-4",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "cdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: my_test_table"
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix-5",
    "href": "Practicals/Introduction/index.html#use-a-prefix-5",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "DO NOT use the prefix to drop tables, you only care about the prefix at the connection stage!\n\ncdm &lt;- CDMConnector::dropSourceTable(cdm = cdm, name = \"my_test_table\")\nCDMConnector::listSourceTables(cdm = cdm)\n\ncharacter(0)"
  },
  {
    "objectID": "Practicals/Introduction/index.html#use-a-prefix-6",
    "href": "Practicals/Introduction/index.html#use-a-prefix-6",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "cdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of Synthea ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -"
  },
  {
    "objectID": "Practicals/Introduction/index.html#consistency-rules",
    "href": "Practicals/Introduction/index.html#consistency-rules",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "We use compute() to compute the result into a temporary (temporary = TRUE) or permanent (temporary = FALSE) table.\nIf it is a temporary table we can assign assign it to where I want for example:\n\ncdm$my_custom_name &lt;- cdm$person |&gt; \n  dplyr::compute()\n\n. . .\nIf it is a permanent table we can only assign it to the same name:\nerror:\n\ncdm$my_custom_name &lt;- cdm$person |&gt; \n  dplyr::compute(name = \"not_my_custom_name\", temporary = FALSE)\n\nError in `[[&lt;-`:\n! You can't assign a table named not_my_custom_name to my_custom_name. Please use compute to change table name.\n\n\n. . .\nno error:\n\ncdm$my_custom_name &lt;- cdm$person |&gt; \n  dplyr::compute(name = \"my_custom_name\", temporary = FALSE)"
  },
  {
    "objectID": "Practicals/Introduction/index.html#consistency-rules-1",
    "href": "Practicals/Introduction/index.html#consistency-rules-1",
    "title": "OMOP and CDMConnector",
    "section": "",
    "text": "Omop names are reserved words, e.g. we can not assign a table that is not the person table to cdm$person.\n. . .\n\ncdm$person &lt;- cdm$drug_exposure |&gt; \n  dplyr::compute(name = \"person\", temporary = FALSE)\n\nError in `newOmopTable()`:\n! gender_concept_id, year_of_birth, race_concept_id and ethnicity_concept_id are not present in table person\n\n\n. . .\n\ncdm$drug_exposure &lt;- cdm$drug_exposure |&gt; \n  dplyr::rename(\"my_id\" = \"person_id\") |&gt; \n  dplyr::compute(name = \"drug_exposure\", temporary = FALSE)\n\nError in `newOmopTable()`:\n! person_id is not present in table drug_exposure"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Summer School RealWorldEvidenceSummerSchool2025",
    "section": "",
    "text": "Summer School RealWorldEvidenceSummerSchool2025"
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "Program",
    "section": "",
    "text": "Time\nSession\n\n\n\n\n13:30-14:00\nWelcome and Set up\n\n\n14:00-14:45\nIntroduction to OMOP and CDMConnector\n\n\n14:45-15:00\nBreak\n\n\n15:00-15:30\nCharacter a database using OmopSketch\n\n\n15:30-15:45\nGeneral practical introduction\n\n\n15:45-16:30\nGeneral practical"
  },
  {
    "objectID": "program.html#monday",
    "href": "program.html#monday",
    "title": "Program",
    "section": "",
    "text": "Time\nSession\n\n\n\n\n13:30-14:00\nWelcome and Set up\n\n\n14:00-14:45\nIntroduction to OMOP and CDMConnector\n\n\n14:45-15:00\nBreak\n\n\n15:00-15:30\nCharacter a database using OmopSketch\n\n\n15:30-15:45\nGeneral practical introduction\n\n\n15:45-16:30\nGeneral practical"
  }
]