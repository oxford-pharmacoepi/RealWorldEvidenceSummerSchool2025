---
title: "OmopSketch"
subtitle: "Characterise databases"
format:
  revealjs: 
    theme: [simple, ../../styleSS25.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: |
      <div style="position: relative; width: 100%;">
        <div style="text-align: center; font-weight: 500;">Real World Evidence Summer School 2025</div>
        <div style="position: absolute; right: 20px; top: -800px;"><a href="../index.qmd" style="text-decoration: none;">⬅ Back to Practicals</a></div>
      </div>
execute:
  echo: true
  eval: true
editor: visual
---

## Overview and motivation

-   OmopSketch is designed to summarise key information of an OMOP-mapped database.
-   It can be used to have a general **characterisation** of a database, or to evaluate the **suitability** of a database for a specific study.
-   The code is publicly available in OHDSI's GitHub repository: [OmopSketch](https://github.com/OHDSI/OmopSketch).
-   Vignettes with further details and examples can be found in the package [website](https://OHDSI.github.io/OmopSketch/index.html).
-   Available from [CRAN](https://cran.r-project.org/web/packages/OmopSketch/index.html).

. . .

<center>

::: title-slide-logos
<img src="https://github.com/OHDSI/OmopSketch/blob/main/man/figures/logo.png?raw=true" alt="Logo 2" class="logo"/>
:::

## Install the latest version of OmopSketch





. . .


```{r, eval=FALSE}
install.packages("OmopSketch")
```

## Create the CDM object

-   Load the required packages

::: fragment
```{r}
library(OmopSketch)
library(CDMConnector)
library(DBI)
library(duckdb)
library(dplyr)
```
:::

-   Create a cdm object containing syntethic data

::: fragment
```{r}
dbName <- "GiBleed"
requireEunomia(datasetName = dbName)
con <- dbConnect(duckdb(), eunomiaDir(datasetName = dbName))
cdm <- cdmFromCon(con = con, cdmSchema = "main", writeSchema = "main", cdmName = dbName)
cdm
```
:::

# 1. Snapshot

## General info on your database  
. . .

`summariseOmopSnapshot()` function provides a real-time overview of the OMOP database, highlighting key characteristics at a specific moment.

. . .

### Key information provided:

-   **Vocabulary version:** Current version from the `vocabulary` table.
-   **Table sizes:** Number of records in the `person` and `observation_period` tables.
-   **Observation period span:** The full time range covered by the `observation_period` table.
-   **Source type:** Identifies the origin or type of the data source.

##  `summariseOmopSnapshot()`

-   Create the [summarised result](https://darwin-eu-dev.github.io/omopgenerics/articles/summarised_result.html) with the snapshot information

::: fragment
```{r, warning=FALSE}
snapshot <- summariseOmopSnapshot(cdm)

snapshot |> glimpse()
```
:::

## `tableOmopSnapshot()`

-   Format the result into a [gt](https://gt.rstudio.com/) table

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
tableOmopSnapshot(snapshot, type = "gt")
```
:::

# 2. Observation Period

## Summarise the content of your observation period table 
. . .

`summariseObservationPeriod()` function generates essential statistics derived from the **observation_period** table.

. . .

### Key Information Provided:

-   **Number of records per person:** Counts of observation periods associated with each individual.
-   **Duration in days:** Length of each observation period, measured in days.
-   **Days to next observation period:** Time elapsed in days between a patient's consecutive observation periods.

## `summariseObservationPeriod()`

-   Create the summarised result

::: fragment
```{r, warning=FALSE}
result <- summariseObservationPeriod(cdm$observation_period, sex = TRUE)
result |> glimpse()
```
:::

## `tableObservationPeriod()`

-   Format the results into a [gt](https://gt.rstudio.com/) table

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
tableObservationPeriod(result, type = "gt")
```
:::

## `plotObservationPeriod()`

-   Plot the results - **Number of subjects**

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, fig.width=8, fig.height=6}
plotObservationPeriod(result,
                      plotType = "barplot",
                      variableName = "Number subjects",
                      colour = "sex")
```
:::

</center>

## `plotObservationPeriod()`

-   Plot the results - **Duration in days**

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, fig.width=8, fig.height=6}
plotObservationPeriod(result,
                      plotType = "densityplot",
                      variableName = "Duration in days",
                      colour = "sex",
                      facet = "observation_period_ordinal")
```
:::

</center>

## Trends in observation period table

. . .

`summariseInObservation()` function summarises trends derived from the `observation_period` table.

. . .

### Key Information Provided:

-   **Number of records:** Count of entries.
-   **Number of subjects:** Count of distinct individuals (patients) represented in the table.
-   **Number of person-days:** The cumulative sum of days individuals are observed.
-   **Number of females:** Count of female subjects in observation.
-   **Median age:** The median age of the subjects at the beginning of the observation period.

## `summariseInObservation()`

-   Choose the interval between **years**, **quarters** and **months** (default is **overall**)
-   Select the output of interest between **record**, **person**, **person-days**, **sex** and **age** (default is **record**)
-   Create the summarised result.

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
result <- summariseInObservation(cdm$observation_period,
                                 interval = "years",
                                 output = c("record","person", "person-days", "sex", "age"), 
                                 ageGroup = list(c(0,50), c(51, Inf))) 
```
:::

## `plotInObservation()`

-   Plot the results - **Number of person-days**.

<center>

::: {.fragment style="overflow-y: scroll; height: 700px;"}
```{r, fig.width=10, fig.height=6}
result |>    
  filter(variable_name == "Number person-days", additional_name != "overall") |>
  plotInObservation(colour = "age_group")
```
:::

## `plotInObservation()`

-   Plot the results - **Median age in observation**.

<center>

::: {.fragment style="overflow-y: scroll; height: 700px;"}
```{r, fig.width=10, fig.height=6}
result |>    
  filter(variable_name == "Median age in observation", additional_name != "overall") |>
  plotInObservation(facet = "age_group")
```
:::
## Your turn: Visualising Observation Trends

. . .

Create a plot showing the **quarterly trend** of the number of people in observation, stratified by **sex** and **age group** (0-30, 31-60, 61+).

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, echo=FALSE, fig.width=13, fig.height=6}
result <- summariseInObservation(cdm$observation_period,
                                 output = "person",
                                 interval = "quarters",
                                 sex = TRUE,
                                 ageGroup = list(c(0,30), c(31,60), c(61, Inf)))

plotInObservation(result |> dplyr::filter(additional_name != "overall"), facet = "sex", colour = "age_group")
```
:::

## Your turn: Visualising Observation Trends

1.  Create the summarised result using `summariseInObservation()`:

2.  Create the plot using `plotInObservation()`, with:

-   `facet = "sex"` → Separate panels by sex 
-   `colour = "age_group"` → Different colors for age groups (`0-30`, `31-60`, `61+`)

. . .

<details>
<summary>💡 Click to show the code</summary>

```{r, eval = FALSE}
result <- summariseInObservation(cdm$observation_period,
                                 output = "person",
                                 interval = "quarters",
                                 sex = TRUE,
                                 ageGroup = list(c(0,30), c(31,60), c(61, Inf)))
plotInObservation(result, facet = "sex", colour = "age_group")
```



# 3. Clinical tables characterisation

## Check missingness

. . .

`summariseMissingData()` function summarises missingness in a OMOP table

. . .

### Key Information Provided:

-   **Number of missing data:** For each column of the table it counts the number of missing values.
-   **Number of zeros:** For each columns containing **concept id** it counts the number of entries equal to 0.

## `summariseMissingData()`

-   Choose the **tables** to analyse
-   Specify the **columns** to assess for missing values (by default all columns are included)
-   Optionally run the analysis on a **sample** of each table (default is 1 million rows)
-   Create the summarised result.

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
result <- summariseMissingData(cdm, 
                               omopTableName = "drug_exposure",
                               col = NULL,
                               sample = 1e03) 
```
:::

## `tableMissingData()`

-   Visualise the result into a [gt](https://gt.rstudio.com/) table

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
tableMissingData(result, type = "gt")
```
:::
## Content of the clinical tables

. . .

`summariseClinicalRecords()` function provides a comprehensive overview of the content of a clinical table.

. . .

### Key Information Provided:

-   **Number of records:** Number of entries in the table
-   **Number of subjects:** Number of distinct subjects represented in the table
-   **Record per person:** Summary statistics on the number of records per person
-   **Records in observation:** Number and percentage of records within the observation period
-   **Domains:** Domains associated with the concepts
-   **Concept type::** Type and source of the records (e.g., EHR, claims)
-   **Source vocabulary:** Vocabulary used for mapping the concepts
-   **Whether the concepts are standard:** Number and percentage of records mapped to standard concept IDs

## `summariseClinicalRecords()`

-   Choose the **tables** to analyse
-   Choose the statistics to compute for records per person (by default mean, standard deviation, median, q25, q75, min and max)
-   Specify which analysis to include (by default, all are included)
-   Create the summarised result.

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
result <- summariseClinicalRecords(cdm, 
                                   omopTableName = "condition_occurrence",
                                   recordsPerPerson = c("mean", "sd", "median", "q25", "q75", "min", "max"),
                                   inObservation = TRUE,
                                   standardConcept = TRUE,
                                   sourceVocabulary = TRUE,
                                   domainId = TRUE,
                                   typeConcept = TRUE) 
```
:::

## `tableClinicalRecords()`

-   Visualise the result into a [gt](https://gt.rstudio.com/) table

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
tableClinicalRecords(result, type = "gt")
```
:::

## Trends in the clinical tables

. . .

`summariseRecordCount()` function summarises the **record trend** over specified time intervals. Only records that fall within the observation period are considered.

-   Choose the tables to analyse
-   Choose the interval between **years**, **quarters** and **months** (default is **overall**)
-   Create the summarised result.

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
result <- summariseRecordCount(cdm, 
                               omopTableName = "visit_occurrence", 
                               interval = "years",
                              dateRange = as.Date(c("2000-01-01", "2015-12-31"))
)
```
:::

## `plotRecordCount()`

-   Visualise the result into a plot

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, fig.width=12, fig.height=6}
plotRecordCount(result, colour = "omop_table")
```
:::

## Your turn: Visualising record trends

. . .

Create a plot showing the yearly trend in the number of drug and condition records, stratified by **sex** and in the **date range** 2010-2018.

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, echo=FALSE, fig.width=12, fig.height=6 }
result <- summariseRecordCount(cdm, omopTableName = c("drug_exposure", "condition_occurrence"),
                               interval = "years",
                               sex = TRUE,
                               dateRange = as.Date(c("2010-01-01", "2018-12-31"))
                               )

plotRecordCount(result, facet = "omop_table", colour = "sex")
```
:::

## Your turn: Visualising record trend

1.  Create the summarised result using `summariseRecordCount()`:

2.  Create the plot using `plotRecordCount()`, with:

-   `facet = "omop_table"` → Separate panels by table 
-   `colour = "sex"` → Different colors for males and females

. . .

<details>
<summary>💡 Click to show the code</summary>
```{r, eval=FALSE}
result <- summariseRecordCount(cdm, omopTableName = c("drug_exposure", "condition_occurrence"),
                               interval = "years",
                               sex = TRUE,
                               dateRange = as.Date(c("2010-01-01", "2018-12-31"))
                               )

plotRecordCount(result, facet = "omop_table", colour = "sex")
```

# 4. Concept Counts

## Concept counts

. . .

`summariseConceptIdCounts()` provides the counts for each concept id available in the table

. . .

### Key Information Provided:

-   **Number of records:** Number of entries for each concept ID
-   **Number of subjects:** Number of distinct individuals associated with each concept ID

## `summariseConceptIdCounts()`

-   Choose the tables to analyse
-   Specify the counting method (e.g., `countBy = "record"` by default, or "person" to count distinct subjects)

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
result <- summariseConceptIdCounts(cdm, 
                                   omopTableName = "procedure_occurrence",
                                   countBy = c("record", "person"))
result |> glimpse()
```
:::

## `tableConceptIdCounts()`

-   Visualise the result in a interactive [reactable](https://glin.github.io/reactable/) table
-   Filter the output using the `display` option:
    -   `display = "standard"`: Show only standard concepts
    -   `display = "source"`: Show only source codes
    -   `display = "missing standard"`: Show source codes without a mapped standard concept
    -   `display = "missing source`": Show standard concepts without a mapped source code
    -   `display = "overall" (default)`: Show all records

## `tableConceptIdCounts()`

<center>

::: {.fragment style="overflow-y: scroll; height: 800px;"}
```{r, warning=FALSE}
tableConceptIdCounts(result, display = "standard",type = "reactable")
```
:::

## `tableTopConceptCounts()`

-   Visualise the most frequent concepts in a [gt](https://gt.rstudio.com/) table
-   Specify the **counting method** (if only one counting is present in the result, it will account for that by default)
-   Choose how many concepts to display (by default `top = 10`)

## `tableTopConceptCounts()`

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE}
tableTopConceptCounts(result, countBy = "record", top = 10, type = "gt")
```
:::

## Your Turn: Top concepts

. . .

Identify the **top 5** concepts in the drug_exposure table based on the number of **subjects**

<center>
::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, echo=FALSE}
result <- summariseConceptIdCounts(cdm, omopTableName = "drug_exposure", countBy = "person")

tableTopConceptCounts(result, top = 5)
```
:::

## Your turn: Top concepts

1.  Create the summarised result using `summariseConceptIdCount()`

2.  Display the 5 most frequent concept in using `tableTopConceptCounts()`, with:

-   `top = 5` → Show the 5 most frequent 

. . .

<details>
<summary>💡 Click to show the code</summary>

```{r, eval=FALSE}
result <- summariseConceptIdCounts(cdm, omopTableName = "drug_exposure", countBy = "person")

tableTopConceptCounts(result, top = 5)
```


# 5. Database Characterisation

## Get a full characterisation of you database

. . .

`databaseCharacteristics()` function brings together all the key summaries in one place. It includes:

-   **Snapshot** of the database

-   **Characterisation of the observation period**

-   **Quality** checks on the tables

-   Overview of **clinical table content**

## `databaseCharacteristics()`

-   Select the **tables** to analyse

-   Choose whether to stratify by **sex** and **age groups**

-   Define the time **interval** for temporal summaries

-   Set the **date range** to focus the analysis

-   Optionally include concept ID counts (`conceptIdCount = FALSE` by default)

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE, eval=FALSE}
result <- databaseCharacteristics(cdm, 
                                  omopTableName = c("drug_exposure",
                                                    "condition_occurrence"), 
                                  sex = TRUE, 
                                  ageGroup = list(c(0,50), c(51, Inf)), 
                                  interval = "years", 
                                  dateRange = as.Date(c("2010-01-01","2020-12-31")),
                                  conceptIdCount = FALSE)
```
:::

## Visualise the characterisation results

. . .

`shinyCharacteristics()` creates a **Shiny app** to explore the results of the database characterisation.

-   Specify the **directory** where the app should be created

-   Optionally customise the title, logo, and visual theme

<center>

::: {.fragment style="overflow-y: scroll; height: 650px;"}
```{r, warning=FALSE, eval=FALSE}
shinyCharacteristics(result, directory = here::here())
```
:::

## `shinyCharacteristics()`

<center>

::: {.stretch}

<iframe src="https://dpa-pde-oxford.shinyapps.io/OmopSketchCharacterisation/" 
        width="100%" 
        height="600" 
        frameborder="0"
        allowfullscreen>
</iframe>

:::

[Link to Shiny App](https://dpa-pde-oxford.shinyapps.io/OmopSketchCharacterisation/)

# OmopSketch

See the package website to explore all available functionalities — and stay tuned for updates!

::: {style="display: flex; justify-content: center; align-items: center; gap: 40px; text-align: center; margin-top: 30px;"}

<div>
<a href="https://dpa-pde-oxford.shinyapps.io/OmopSketchCharacterisation/" target="_blank">🌐<br>Shiny App</a>
</div>

<div>
<a href="https://ohdsi.github.io/OmopSketch/" target="_blank">📘<br>Documentation</a>
</div>

<div>
<a href="https://dpa-pde-oxford.quarto.pub/real-world-evidence-summer-school/Practicals/OmopSketch/index.html#/title-slide" target="_blank">🎞️<br>Presentation</a>
</div>

:::

<br>

<div style="text-align: center; font-size: 1.1em; margin-top: 20px;">
📧 <a href="mailto:cecilia.campanile@ndorms.ox.ac.uk">cecilia.campanile@ndorms.ox.ac.uk</a>
</div>
