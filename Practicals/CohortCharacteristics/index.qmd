---
title: "CohortCharacteristics"
subtitle: "Characterise cohorts"
format:
  revealjs: 
    theme: [simple, ../../styleSS25.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: |
      <div style="position: relative; width: 100%;">
        <div style="text-align: center; font-weight: 500;">Real World Evidence Summer School 2025</div>
        <div style="position: absolute; right: 20px; top: -800px;"><a href="../index.qmd" style="text-decoration: none;">â¬… Back to Practicals</a></div>
      </div>
execute:
  echo: true
  eval: true
editor: visual
---

## CohortCharacteristics

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center"}

## Let's get started

```{r, echo = FALSE}
options("width"=120)
library(DiagrammeR)
```

```{r, echo = TRUE}
library(duckdb)
library(CDMConnector)
library(PatientProfiles)
library(dplyr)
library(ggplot2)

requireEunomia()

con <- dbConnect(duckdb(), eunomiaDir())
cdm <- cdmFromCon(con = con, cdmSchema = "main", writeSchema = "main")
cdm <- generateConceptCohortSet(
  cdm = cdm,
  name = "sinusitis",
  conceptSet = list(
    "bacterial_sinusitis" = 4294548, 
    "viral_sinusitis" = 40481087, 
    "chronic_sinusitis" = 257012, 
    "any_sinusitis" = c(4294548, 40481087, 257012)
  ), 
  limit = "all", 
  end = 0
)
cdm$new_sinusitis <- cdm$sinusitis |>
  addSex() |>
  filter(sex == "Female") |>
  select(-"sex") |>
  compute(name = "new_sinusitis", temporary = F) |>
  recordCohortAttrition("Restrict to Females") |>
  addAge() |>
  filter(age < 18) |>
  select(-"age") |>
  compute(name = "new_sinusitis", temporary = F) |>
  recordCohortAttrition("Restrict to under 18")

cdm <- generateConceptCohortSet(
  cdm = cdm, 
  conceptSet = list(
    "myocardial_infarction" = c(4329847),
    "fracture" = c(4048695, 4142905, 4278672, 4237458, 4230399, 40480160, 4066995, 4059173, 4134304),
    "allergy" = c(4084167, 40486433, 4280726, 4048171),
    "infection" =  c(4116491, 433125, 4056621, 40481087, 4112343),
    "pneumonia" = c(255848),
    "asthma" = c(4051466, 317009)
  ),
  limit = "all",
  end = 0,
  name = "conditions"
)

cdm <- generateConceptCohortSet(
  cdm = cdm, 
  conceptSet = list(
    "antineoplastic_and_immunomodulating_agents" = c(1118088, 1118084, 40224132, 19010482, 40224805, 19007333, 1500211, 1305058, 1503184, 19134077, 1549786),
    "musculoskeletal_system" = c(1118088, 1557272, 40162359, 1124300, 1115008, 40173590, 1118084, 42707627, 19019273, 19019979, 19078461, 19003953, 1112807, 1115171, 1177480),
    "antiinfectives_for_systemic_use" = c(19129655, 1728416, 920293, 19074841, 920300, 920334, 19074843, 19075001, 19073183, 19073188, 1713671, 1729720, 19006318, 1778162, 46275444, 1717327, 1738521, 1741122, 1759842, 1713332, 1746114, 1768849, 46233710, 19133873, 46233988, 19133905),
    "nervous_system" = c(708298, 701322, 723013, 1129625, 1110410, 753626, 1124957, 1102527, 1125315, 782043, 791967, 1119510, 19078219, 757627, 40220386, 740275, 40223774, 1154029, 1127078, 1127433, 40222846, 19057271, 40223768, 45892894, 705944, 715997, 19078924, 19076374, 19077572, 40229134, 19059056, 19016749, 40236446, 19074679, 742185, 40231925, 1112807, 35605858, 40162522, 782047, 19039298, 19059528, 836654, 836659, 19115351, 19023398, 19002770, 19123231, 19133768, 40165015),
    "dermatologicals" = c(1129625, 1149380, 1124300, 836654, 1595799, 975125, 19008572),
    "respiratory_system" = c(1129625, 1149196, 1149380, 1150770, 1150836, 1153428, 1107830, 1110410, 738818, 1124957, 40169216, 1125443, 1119510, 1137529, 1154615, 1154343, 40223821, 19019979, 19112599, 40223834, 43012036, 40229134, 19029476, 19078461, 40232448, 1177480, 1192710, 1343916, 1150771, 1150837, 1107882, 975125, 1174888, 40169281, 40228214, 40228230, 19125062)
  ),
  limit = "all",
  end = "event_end_date",
  name = "medications"
)
```

## Workflow

We have three types of functions:

-   **summarise**: these functions produce an standardised output to summarise a cohort. This standard output is called `summarised_result`.

-   **plot**: these functions produce plots (currently, only ggplot, but working to implement plotly) from a `summarised_result` object.

-   **table**: these functions produce tables (gt and flextable) from a `summarised_result` object.

. . .

## Contents

-   [summariseCharacteristics](https://darwin-eu.github.io/CohortCharacteristics/reference/summariseCharacteristics.html)

-   [summariseLargeScaleCharacteristics](https://darwin-eu.github.io/CohortCharacteristics/reference/summariseLargeScaleCharacteristics.html)

-   [summariseCohortTiming](https://darwin-eu.github.io/CohortCharacteristics/articles/summarise_cohort_timing.html)

-   [summariseCohortOverlap](https://darwin-eu.github.io/CohortCharacteristics/articles/summarise_cohort_overlap.html)

## Website

Cohort characteristics is on cran:

. . .

```{r, eval = FALSE}
install.packages("CohortCharacteristics")
```

. . .

You can also install the development version from our github repo:

. . .

```{r, eval = FALSE}
remotes::install_github("darwin-eu-dev/CohortCharacteristics")
```

. . .

The documentation and vignettes of the packages can be found in our page: <https://darwin-eu-dev.github.io/CohortCharacteristics/>

## summariseCharacteristics

. . .

To get summarise characteristics for your cohort, pipe in below to your cohort table.

```{r, echo = T, eval = T}
library(CohortCharacteristics)

 results <- cdm$new_sinusitis |>
  summariseCharacteristics()

```

. . .

Its return the cohort characteristics in a `summarised_result` object format.

```{r, echo = T, eval = T}

results |> glimpse()

```

## tableCharacteristics

. . .

To get a tidy table from the `summarised_result` object.

```{r, echo = T, eval = T}

results |> tableCharacteristics(header = "cohort_name")

```

## Commonly used arguement for summarisedCharacteristics

. . .

-   `strata` to create stratification for the results.

-   `cohortId` filter by cohort Id.

-   `ageGroup` A list of age groups to return count for.

-   `tableIntersect` count/flag/date/days

-   `cohortIntersect` count/flag/date/days

-   `conceptIntersect`count/flag/date/days

-   [link](https://darwin-eu.github.io/CohortCharacteristics/reference/summariseCharacteristics.html)

## ageGroup example

```{r, echo = T, eval = T}

cdm$new_sinusitis |>
  summariseCharacteristics(ageGroup = list(c(0,10),c(11,18))) |>
  tableCharacteristics(header = "cohort_name")

```

## strata example

```{r, echo = T, eval = T}

cdm$new_sinusitis |> 
  addAge(ageGroup = list(c(0,10),c(11,18))) |>
  summariseCharacteristics(cohortId = 1,
                           strata = list("age_group")) |>
  tableCharacteristics(header = "age_group")

```

## intersection with another table

. . .

you can get the count/flag/date//days with other tables

```{r, echo = T, eval = F}

cdm$new_sinusitis |>
  summariseCharacteristics(
    tableIntersectCount = list(
      "Number of visits prior year" = list(
        tableName = "visit_occurrence", window = c(-365, 0)
      )
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(
        targetCohortTable = "conditions", window = c(-Inf, 0)
      ),
      "Medications prior year" = list(
        targetCohortTable = "medications", window = c(-365, 0)
      )
    )
  ) |>
  tableCharacteristics(header = "cohort_name")

```

## intersection with another table

you can get the count/flag/date//days with other tables

```{r, echo = F, eval = T, results = 'asis'}

 res <- cdm$new_sinusitis |>
  summariseCharacteristics(
    tableIntersectCount = list(
      "Number of visits prior year" = list(
        tableName = "visit_occurrence", window = c(-365, 0)
      )
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(
        targetCohortTable = "conditions", window = c(-Inf, 0)
      ),
      "Medications prior year" = list(
        targetCohortTable = "medications", window = c(-365, 0)
      )
    )
  ) |>
  tableCharacteristics(header = "cohort_name")

# Wrap the result in a scrollable div
cat("<div style='max-height:400px; overflow-y:auto; border:1px solid #ccc; padding:10px;'>")
print(res)
cat("</div>")

```

## Plots

. . .

you can obtain a plot of the variable you want from the summariseCharacteristics using the `plotCharacteristics` function

```{r, echo = T, eval = T}

cdm$new_sinusitis |>
  summariseCharacteristics() |>
  filter(variable_name == "Age" & strata_level == "overall") |>
  plotCharacteristics(plotStyle = "boxplot")

```

## Plots

```{r, echo = T, eval = T}

cdm$new_sinusitis |>
  summariseCharacteristics() |>
  filter(variable_name == "Age" & estimate_name == "median") |>
  plotCharacteristics(plotStyle = "barplot", 
                      facet = "cohort_name",
                      colour = "cdm_name")

```

## Plots

. . .

these are ggplot object and are compatible with the usual ggplot command for editing.

```{r, echo = T, eval = T}

cdm$new_sinusitis |>
  summariseCharacteristics() |>
  filter(variable_name == "Age" & estimate_name == "median") |>
  plotCharacteristics(plotStyle = "barplot", 
                      facet = "cohort_name",
                      colour = "cdm_name") +
  ggtitle("Median age of the cohort")

```

## Plot cohort Attrition

. . .

Another useful function is `plotCohortAttrition` and `summariseCohortAttrition`, it return the attrition flowchart of your cohorts.

```{r, echo = T, eval = T}
cdm$new_sinusitis |> 
  summariseCohortAttrition(cohortId = 1) |> 
  plotCohortAttrition(type = "png")
```

## SummariseLargeScaleCharacteristics

. . .

Sometimes we might want to summarise all clinical events for the cohorts for different time window, we can do this with `SummariseLargeScaleCharacteristics`

```{r, echo = T, eval = T}
result <- cdm$sinusitis |>
  summariseLargeScaleCharacteristics(
    window = list(c(-Inf, -1), c(1, Inf)),
    eventInWindow = "condition_occurrence",
    minimumFrequency = 0.05
  )
result |>
  glimpse()
```

## SummariseLargeScaleCharacteristics

. . .

`tableLargeScaleCharacteristics` for tidy table

```{r, echo = T, eval = T}
result |> 
  tableTopLargeScaleCharacteristics(topConcepts = 5)
```

## SummariseCohortOverlap

. . .

When creating multiple cohort, we might be interested in the overlap of individuals between those cohorts. `SummariseCohortOverlap` does this for you.

```{r, echo = T, eval = T}

result <- cdm$sinusitis |>
  summariseCohortOverlap()

result |> glimpse()

```

## SummariseCohortOverlap

. . .

Again can get a table with `tableCohortOverlap`

```{r, echo = T, eval = T}

result |> tableCohortOverlap()

```

## plotCohortOverlap

. . .

Again can get a plot with `plotCohortOverlap`

```{r, echo = T, eval = T}

result |> plotCohortOverlap(uniqueCombinations = TRUE)

```

## SummariseCohortTiming

. . .

When creating multiple cohort, we might be interested in timing of entry between cohorts. `SummariseCohortTiming` does this for you.

```{r, echo = T, eval = T}

result <- cdm$sinusitis |>
  summariseCohortTiming(restrictToFirstEntry = TRUE)

result |> glimpse()

```

## SummariseCohortOverlap

. . .

Again can get a table with `tableCohortTiming`

```{r, echo = T, eval = T}

result |> tableCohortTiming(timeScale = "years", 
                            uniqueCombinations = FALSE)

```

## plotCohortOverlap

. . .

Again can get a plot with `plotCohortTiming`

```{r, echo = T, eval = T}

result |> plotCohortTiming(
  plotType = "boxplot",
  timeScale = "years",
  uniqueCombinations = FALSE
)

```

## plotCohortOverlap

. . .

Or return a densityplot

```{r, echo = T, eval = T}

result |> plotCohortTiming(
  plotType = "densityplot",
  timeScale = "years",
  uniqueCombinations = FALSE
)

```

#  {.end-slide}

::: {style="margin-bottom: 25px;"}
:::

::: {style="margin-bottom: 25px;"}
:::

::: columns
::: {.column width="35%"}
![](images/hexticker.png){style="right: 50%; top: 50%; height: 500; fig-align: center"}
:::

::: {.column width="65%"}
::: {style="margin-top: 135px;"}
:::

[**CohortCharacteristics**]{style="font-size: 100px;"}

::: {style="margin-bottom: 25px;"}
:::

[**The end**]{style="font-size: 60px; text-align: left; color: grey"}

::: {style="margin-bottom: 25px;"}
:::

::: columns
::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**CRAN**](https://cran.r-project.org/web/packages/CohortCharacteristics){style="color: #3a6ea5; text-decoration: underline;"}
:::

::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**Manual**](https://cran.r-project.org/web/packages/CohortCharacteristics/CohortCharacteristics.pdf){style="color: #3a6ea5; text-decoration: underline; text-align:center"}
:::

::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**GitHub**](https://github.com/darwin-eu-dev/CohortCharacteristics){style="color: #3a6ea5; text-decoration: underline; text-align:center"}
:::

::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**Website**](https://darwin-eu-dev.github.io/CohortCharacteristics/){style="color: #3a6ea5; text-decoration: underline; text-align:center"}
:::

::: {.column width="1.2%"}
:::
:::
:::
:::
